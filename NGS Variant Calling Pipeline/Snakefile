import os

configfile: "config.yaml"

samples = config["samples"]
ref = config["reference"]
known_sites = config["known_sites"]

rule all:
    input:
        expand("results/{sample}.annotated.vcf", sample=samples)

rule fastqc:
    input:
        R1=lambda wildcards: samples[wildcards.sample]["R1"],
        R2=lambda wildcards: samples[wildcards.sample]["R2"]
    output:
        "results/{sample}_R1_fastqc.html",
        "results/{sample}_R2_fastqc.html"
    shell:
        "fastqc {input.R1} {input.R2} -o results/"

rule bwa_align:
    input:
        ref=ref,
        R1=lambda wildcards: samples[wildcards.sample]["R1"],
        R2=lambda wildcards: samples[wildcards.sample]["R2"]
    output:
        temp("results/{sample}.sam")
    shell:
        "bwa mem -t 4 {input.ref} {input.R1} {input.R2} > {output}"

rule sam_to_bam:
    input:
        "results/{sample}.sam"
    output:
        temp("results/{sample}.bam")
    shell:
        "samtools view -Sb {input} > {output}"

rule sort_bam:
    input:
        "results/{sample}.bam"
    output:
        temp("results/{sample}.sorted.bam")
    shell:
        "samtools sort {input} -o {output}"

rule mark_duplicates:
    input:
        "results/{sample}.sorted.bam"
    output:
        bam="results/{sample}.dedup.bam",
        metrics="results/{sample}_dup_metrics.txt"
    shell:
        "picard MarkDuplicates I={input} O={output.bam} M={output.metrics} VALIDATION_STRINGENCY=LENIENT"

rule variant_calling:
    input:
        bam="results/{sample}.dedup.bam",
        ref=ref
    output:
        "results/{sample}.vcf"
    shell:
        "gatk HaplotypeCaller -R {input.ref} -I {input.bam} -O {output}"

rule annotate:
    input:
        "results/{sample}.vcf"
    output:
        "results/{sample}.annotated.vcf"
    shell:
        "snpEff hg38 {input} > {output}"
